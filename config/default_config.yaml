# Copyright 2018-2024 Institute of Computer Science of the Czech Academy of
# Sciences, Prague, Czech Republic. Authors: Martin Bures, Jaroslav Resler.
#
# This file is part of PALM-GeM.
#
# PALM-GeM is free software: you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# PALM-GeM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# PALM-GeM. If not, see <https://www.gnu.org/licenses/>.

# input schema and table names
input_schema: 'inputs_prague'

# default domain and case values and domain parameters
domain:
    name: 'case_name'
    scenario: 'scenario_00'
    parent_domain_schema: ''
    dx: 10.0
    dy: 10.0
    dz: -1.0
    nx: 128
    ny: 128
    cent_x: 459180
    cent_y: 5547800

default_height:
    0: 6    # [m]
    1: 6    # [m] Residential, < 1950	33
    2: 6    # [m] Residential, 1950 - 2000	33
    3: 6    # [m] Residential, > 2000	33
    4: 12   # [m] Office, < 1950	33
    5: 12   # [m] Office, 1950 - 2000	33
    6: 12   # [m] Office, > 2000	33

# case table names
tables:
    grid:                   'grid'
    dem:                    'dem'
    buildings_height:       'buildings'   # copied DEM from INPUTS
    buildings_grid:         'buildings_grid' # for top 2d and 3d, gridded table
    landcover:              'landcover'
    walls:                  'walls'
    roofs:                  'roofs'
    buildings_offset:       'buildings_offset'
    aspect:                 'buildings_aspect_deg'
    slope:                  'buildings_slope_deg'
    slanted_wall:           'slanted_wall'
    slanted_roof:           'slanted_roof'
    slanted_terr_wall:      'slanted_terr_wall'
    slanted_terrain:        'slanted_terrain'
    slanted_wall_gridded_temp: 'slanted_wall_gridded_temp'
    slanted_wall_gridded:   'slanted_wall_gridded'
    slanted_roof_gridded_temp: 'slanted_roof_gridded_temp'
    slanted_roof_gridded:   'slanted_roof_gridded'
    slanted_terrain_gridded_temp: 'slanted_terrain_gridded_temp'
    slanted_terrain_gridded: 'slanted_terrain_gridded'
    walls_outer:            'walls_outer'
    slanted_faces:          'slanted_faces'
    vertices:               'vertices'
    land_build:             'landcover_buildings'
    build_new:              'buildings_new'
    height_corrected:       'building_height_correct'
    height_terr_corrected:  'terrain_height_correct'
    slanted_wall_points:    'slanted_wall_points'
    trees:                  'trees'
    trees_grid:             'trees_grid'
    extras:                 'extras'
    extras_shp:             'extras_shp'
    surface_params:         'surface_params'
    building_walls:         'building_walls'
    surfaces:               'surfaces'
    
idx:
    landcover: 'lid'
    walls:     'wid'
    roofs:     'rid'
    trees:     'sid'
    buildings_depth_shp: 'gid'
    extras_shp: 'gid'
    
build_3d:
    bridge_width: 2.0
    bridge:       'bridge'
    passage:      'passage'
    overhanging:  'overhang'

origin_time: '1970-01-01 00:00:00'

# maximal distance for looking of neighbour building heights
maxbuildingdisance: 5

# slanted surfaces
do_cct: False
slanted_pars:
    max_dist: 2.0
    simplify_dist: 3.0
    min_seg: 2.0
    do_vtk: True
    clean_up: True
    empty_vert: -1
    off_dist: 4    # grid points, limit search of nearest gridpoint for slanted face
    dist2edge: 3.0
    roofs_dist2edge: 2.0
    dist2edge_filter: 0.6
    wall_build_height_max_dist: 2.0
    
fill_missing_holes: True

cortyard_fill:
    apply: False
    count: 30
    
topo_fill_v2:
    apply: False
    count: 9
    
force_lsm_only: False
force_cyclic: False
force_cyclic_nc: 4
force_building_boundary: False
force_building_boundary_dist: 3 # distance in grid points, real distance =* dx
crop_small_buildings: False  # In case of slanted faces
small_buildings_area: 20 # Area in grid points

trees:
    lad_reduction: 1.0    # coefficient for reduction of LAD in winter
    bad_coef: 0.1         # coefficient for reduction of BAD from LAD to account branches
    nhv: 10               # number of discretization layers for calculation of tree vertical shapes
    nump: 10              # number of polygon edges for interpolation of cycles for treetops and tree trunks
    ext_coef: 0.6         # Extinction coefficient (same as in PALM code) for tree crown transmissivity
    
walls:
    # wall directions (North, East, South, West) direction = [1, 2, 3, 4]
    wall_directions: [ [ 0,1 ],[ 1,0 ],[ 0,-1 ],[ -1,0 ] ]
    # wall azimuth (North, East, South, West)
    wall_azimuth: [ 0, 90, 180, 270 ]
    # roof directions (Up, Down) direction = [0, 5]
    roof_directions: [ 1, -1 ]
    # roof zenith (Up, Down)
    roof_zenith: [ 0, 180 ]
    
# treat insulated walls
insulation:
    enabled: False
    fields: ['zatepd', 'zateph']  # names of fields in walls table carrying information about insulation (ground, upper)
    building_pars: [6, 7, 9, 10, 26, 27, 29, 30]  # index of parameter in building_pars_wall
    #6,7: heat capacity of wall layer 1,2 | 9,10: thermal conductivity of wall layer 1,2 |
    #26,27: ground floor heat capacity of wall layer 1,2 | 29,30: ground floor thermal conductivity of wall layer 1,2
    pars_fields: [1, 1, 1, 1, 0, 0, 0, 0]  # index of information field
    pars_items: [0, 0, 1, 1, 0, 0, 1, 1]  # index of replacement value in parameters
    building_surface_pars: [5, 6, 8, 9]  # index of parameter in building_surface_pars
        # 5,6: heat capacity of wall layer 1,2
        # 8,9: thermal conductivity of wall layer 1,2
    surface_pars_items: [0, 0, 1, 1]
    values: [39000, 0.035, 30] # capacity: J/kg/K (= 1300 J/kg/K * 30 kg/m3), conductivity: W/m/K, density: kg/m3


# compression of the output netcdf file
zlib: False
complevel: 4

# global attributes of the static driver netcdf file
# fill values
fill_values:
    b: -127
    i: -9999
    i4: -9999
    f4: -9999.0
    f8: -9999.0

ncprops:
    acronym: 'ICS'
    author: 'Jaroslav Resler, resler@cs.cas.cz'
    campaign: ''
    comment: ''
    contact_person: ''
    data_content: ''
    dependencies: ''
    institution: 'ICS Prague'
    keywords: ''
    location: ''
    palm_version: '6.0'
    references: ''
    rotation_angle: 0.0
    site: domain
    source: ''
    version: ''

# definitions of the basic constants
# needed for creation of static driver according to PID specification
ndims:
    nwater_pars: 7                 # number of elements in water_pars
    cct_max_num_vertices_per_face: 7 # number of vertices in slanted polygons
    dim_3d: 3
    cct_dim_vertex_coords: 4
    cct_dim_vertex_shifts: 1
    nalbedo_pars: 7                # number of elements in albedo_pars
    npavement_pars: 4              # number of elements in pavement_pars
    npavement_subsurface_pars: 2   # number of elements in pavement_subsurface_pars
    nsoil_pars: 8                  # number of elements in soil_pars
    nvegetation_pars: 12           # number of elements in vegetation_pars
    nbuilding_pars: 150            # number of elements in building_pars  (former 51)
    nbuilding_surface_pars: 28     # number of elements in building_surface_pars
    nsurface_fraction: 3           # number of elements in surface_fraction
    
landcover_params_var: 'katland'

multipolygon: True

ground:
    nzsoil: 8              # number of layers of soil (pavements,...)
    nzsoil_surface: 2      # number of layers of soil (pavements,...) considered as surface layers (filled from capacity_surf, conductivity_surf,...)
    soil_type_default: 3   # default soil type medium-fine in terms of porosity
    dz_soil: [0.01, 0.02, 0.04, 0.06, 0.14, 0.26, 0.54, 1.86] # default soil layer thickness configuration from PALM
    nzwall: 4              # number of wall layers (fixed to 4 for in PIDS so far)
    zwall_norm:
        - &zwall_norm1 0.0242
        - &zwall_norm2 0.0969
        - &zwall_norm3 0.346
        - &zwall_norm4 1.0 # normalized wall layers position (wall layers position, not thickness is read in PALM!!)
                                                # (wall layers are set according the configurable total wall thickness and constant relative layers positions)
    zwindow_norm: [ 0.25, 0.5, 0.75, 1.0 ]       # not used so far the thickness of the window fraction cannot be set by PID building_pars
    zgreen_norm: [ 0.25, 0.5, 0.75, 1.0 ]      # not used so far the thickness of the green fraction cannot be set by PID building_pars
    ground_floor_height: &ground_floor_height 3  # height of the pedestrian zone (m) (properties of walls are given for low and upper zone)

# definition of the landcover type ranges
type_range:
    vegetation_min: 100
    vegetation_max: 199
    pavement_min:   200
    pavement_max:   299
    water_min:      300
    water_max:      399
    building_min:   900
    building_max:   999
    bridge:         907
    
# definition of the surface properties ranges
surf_range:
    land_min: 0
    land_max: 100
    wall_min: 100
    wall_max: 200
    roof_min: 200
    roof_max: 300

water_pars_temp:       # assign water body temperature according to landcover type
    1: 283.15
    2: 283.15
    3: 283.15
    4: 283.15
    5: 283.15
    6: 283.15
    
# minimal thickness of roofs and walls
minroofthick: &minroofthick 0.3
minwallthick: &minwallthick 0.3
# window transmission (common for all windows for now)
wintrans: &wintrans 0.8

# temperatures for indoor/outdoor buildings
temperatures_indoor:
    indoor:  &indoor_temp 297   # indoor
    outdoor: &outdoor_temp 295  # outdoor

water_pars:
#    0: *water_pars_temp   # water temperature (fixed) (K)
#    1: pass # Roughness length for momentum
#    2: pass # Roughness length for heat
#    3: pass # Heat conductivity between skin layer and water (stable conditions)
#    4: pass # Heat conductivity between skin layer and water (unstable conditions)
    5: 0 # albedo_type
    6: p.emissivity # Surface emissivity
    
pavement_pars:
    0: p.roughness     # roughness length for momentum (m)
    1: p.roughness_h   # roughness length for heat (m)
    2: 0                 # albedo type set to 0 = albedo will be supplied in albedo_props
                          # pavement_pars 2 is set automatically based on pavement type used (including 0 for user-defined), it is overwritten if albedo_pars is used
    3: p.emissivity     # emissivity (0-1)
    
vegetation_pars:
#    0: # fixme: complete # Minimum canopy resistance
#    1: # Leaf area index
#    2: # Vegetation coverage
#    3: # Canopy resistance coefficient
    4: p.roughness # Roughness length for momentum
    5: p.roughness_h # Roughness length for heat
#    6: # Skin lacer heat conductivity (stable conditions)
#    7: # Skin layer heat conductivity (unstable conditions)
#    8: # Fraction of incoming shortwave radiation transmitted directly to the soil (not implemented yet)
#    9: # Heat capacity of the surface
    10: 0 # albedo_type
    11: p.emissivity # Surface emissivity
    
pavement_subsurface_pars:
    0: ['p.conductivity_surf','p.conductivity_volume']      # Thermal conductivity of the respective soil layer (W/m/K)
    1: ['p.capacity_surf','p.capacity_volume']              # Volumetric heat capacity of the respective soil layer (J/m³/K)
    
# calculation formulas for particular parameters of albedo_pars(nalbedo_pars,y,x)
# [landcover, building roof, building wall (above groud floor level)]
albedo_pars:
    0: ['l.albedo',      'r.albedo',      'w.albedoh']                # Broadband albedo (wall fraction in case of building) at (y,x).
    1: ['1-l.emisivita', '1-r.emisivita', '1-pw.emissivity']          # Only for buildings. Longwave albedo of wall fraction at (y,x).
    2: ['l.albedo',      'r.albedo',      'w.albedoh']                # Only for buildings. Shortwave albedo of wall fraction at (y,x).
    3: ['1-l.emisivita', '1-r.emisivita', '1-pw.emissivity']          # Only for buildings. Longwave albedo of green fraction at (y,x). (no info for green fraction on roofs so far)
    4: ['l.albedo',      'r.albedo',      'w.albedoh']                # Only for buildings. Shortwave albedo of green fraction at (y,x). (no info for green fraction on roofs so far)
    5: ['1-l.emisivita', '1-r.emisivita', '1-pw.emissivity']          # Only for buildings. Longwave albedo of window fraction at (y,x). (no info for window fraction on roofs so far)
    6: ['l.albedo',      'r.albedo',      'w.albedoh']                # Only for buildings. Shortwave albedo of window fraction at (y,x). (no info for window fraction on roofs so far)

# pr ... roof, pg ... ground floor, pu ... upper, pd ... downward facing, b ... bridge
building_pars:
    0:  'w.wallfrach'           # Wall fraction above the ground floor level (0-1)
    1:  'w.winfrach'            # Window fraction above the ground floor level (0-1)
    2:  '0'                     # Green fraction on wall above the ground floor level (0-1)
    3:  '0'                     # Green fraction on roof (0-1)
        # NOTE set 0.9 for roof type 4 (lawn) and 0.5 for roof type 5 (ornamental garden) (set according building_pars_repl)
    4:  '0'                     # Leaf area index of green fraction on roof (m²/m²)
        # NOTE set 1.4 for roof type 4 (lawn) and 0.4 for roof type 5 (ornamental garden) (set according building_pars_repl)
    5:  '0'                     # Leaf area index of green fraction on wall above the ground floor level (m²/m²)
    6:  'pu.capacity_surf'        # Heat capacity of wall layer 1 above the ground floor level (J/m²/K)
    7:  'pu.capacity_surf'        # Heat capacity of wall layer 2 above the ground floor level (J/m²/K)
    8:  'pu.capacity_volume'     # Heat capacity of wall layer 3 above the ground floor level (J/m²/K)
    9:  'pu.conductivity_surf'   # Thermal conductivity of wall layer 1 above the ground floor level (W/m/K)
    10: 'pu.conductivity_surf'  # Thermal conductivity of wall layer 2 above the ground floor level (W/m/K)
    11: 'pu.conductivity_volume'# Thermal conductivity of wall layer 3 above the ground floor level (W/m/K)
    12: *indoor_temp           # Indoor target summer temperature (K)
    13: *outdoor_temp          # Indoor target winter temperature (K)
    14: 'pu.emissivity' #'w.emisivitah'          # Emissivity of wall fraction above the ground floor level (0-1)
    15: 'pu.emissivity' #'w.emisivitah'           # Emissivity of green fraction above the ground floor level (0-1)
    16: 'pu.emissivity' #'w.emisivitah'          # Emissivity of window fraction above the ground floor level (0-1)
    17: *wintrans              # Transmissivity of window fraction above the ground floor level (0-1)
    18: 'pu.roughness'           # Roughness length for momentum above the ground floor level (m)
    19: 'pu.roughness_h'        # Roughness length for heat above the ground floor level (m)
    20: *ground_floor_height   # Ground floor height (m)
    21: 'w.wallfracd'                    # Ground floor wall fraction (0-1)
    22: 'w.winfracd'                     # Ground floor window fraction (0-1)
    23: '0'                     # Ground floor green fraction on wall (0-1)
    24: '0'                     # Ground floor green fraction on roof  (0-1) # TODO: here what?
    25: '0'                     # Ground floor leaf area index of green fraction (wall) (m²/m²)
    26: 'pg.capacity_surf'       # Ground floor heat capacity of wall layer 1 (J/m²/K)
    27: 'pg.capacity_surf'       # Ground floor heat capacity of wall layer 2 (J/m²/K)
    28: 'pg.capacity_volume'     # Ground floor heat capacity of wall layer 3 (J/m²/K)
    29: 'pg.conductivity_surf'  # Ground floor thermal conductivity of wall layer 1 (W/m/K)
    30: 'pg.conductivity_surf'   # Ground floor thermal conductivity of wall layer 2 (W/m/K)
    31: 'pg.conductivity_volume' # Ground floor thermal conductivity of wall layer 3 (W/m/K)
    32: 'pg.emissivity' #'w.emisivitad'          # Ground floor emissivity of wall fraction (0-1)
    33: 'pg.emissivity' #'w.emisivitad'           # Ground floor emissivity of green fraction (0-1)
    34: 'pg.emissivity' #'w.emisivitad'          # Ground floor emissivity of window fraction (0-1)
    35: *wintrans            # Ground floor transmissivity of window fraction (0-1)
    36: 'pg.roughness'           # Ground floor roughness length for momentum (m)
    37: 'pg.roughness_h'          # Ground floor roughness length for heat (m)
    38: '0'                      # albedo_type of wall fraction, albedo_type = 0 albedo will be supplied by albedo_props
    39: '0'                      # albedo_type of green fraction, albedo_type = 0 albedo will be supplied by albedo_props
    40: '0'                      # albedo_type of window fraction, albedo_type = 0 albedo will be supplied by albedo_props
    41: !join [ p.thicknes*, *zwall_norm1 ]  # Wall thickness of layer 1 (m)
    42: !join [ p.thicknes*, *zwall_norm2 ]  # Wall thickness of layer 2 (m)
    43: !join [ p.thicknes*, *zwall_norm3 ]  # Wall thickness of layer 3 (m)
    44: !join [ p.thicknes*, *zwall_norm4 ]  # Wall thickness of layer 4 (m)
    45: 'pu.capacity_surf' # Surface wall heat capacity (J/m²/K)
    46: 'pu.conductivity_surf' # Surface wall conductivity (W/m²/K)
    # 47: # Heat capacity of window surface (J/m²/K)
    # 48: # Heat capacity of green surface (J/m²/K)
    # 49: # Thermal conductivity of window surface (W/m/K)
    # 50: # Thermal conductivity of green surface (W/m/K)
    # 51: # Wall fraction ground plate (1)
    # 52: # Thickness of ground plate wall layer 1 (m)
    # 53: # Thickness of ground plate wall layer 2 (m)
    # 54: # Thickness of ground plate wall layer 3 (m)
    # 55: # Thickness of ground plate wall layer 4 (m)
    # 56: # Heat capacity of ground plate wall layers 1 (J/m²/K)
    # 57: # Heat capacity of ground plate wall layer 2 (J/m²/K)
    # 58: # Heat capacity of ground plate wall layer 3 (J/m²/K)
    # 59: # Thermal conductivity of ground plate wall layers 1 (W/m/K)
    # 60: # Thermal conductivity of ground plate wall layer 2 (W/m/K)
    # 61: # Thermal conductivity of ground plate wall layer 3 (W/m/K)
    62: !join [ p.thicknes*, *zwall_norm1 ] # Thickness of first floor wall layer 1 (m)
    63: !join [ p.thicknes*, *zwall_norm2 ] # Thickness of first floor wall layer 2 (m)
    64: !join [ p.thicknes*, *zwall_norm3 ] # Thickness of first floor wall layer 3 (m)
    65: !join [ p.thicknes*, *zwall_norm4 ] # Thickness of first floor wall layer 4 (m)
    66: '0'  # Albedo of ground floor wall (1)
    # 67: # Thickness of first floor window layer 1 (m)
    # 68: # Thickness of first floor window layer 2 (m)
    # 69: # Thickness of first floor window layer 3 (m)
    # 70: # Thickness of first floor window layer 4 (m)
    # 71: # Heat capacity of first floor window layers 1 (J/m²/K)
    # 72: # Heat capacity of first floor window layer 2 (J/m²/K)
    # 73: # Heat capacity of first floor window layer 3 (J/m²/K)
    # 74: # Thermal conductivity of first floor window layers 1 (W/m/K)
    # 75: # Thermal conductivity of first floor window layer 2 (W/m/K)
    # 76: # Thermal conductivity of first floor window layer 3 (W/m/K)
    # 77: # Albedo of first floor window (1)
    # 78: # Albedo of first floor green surface (1)
    # 79: # Thickness of standard floor window layer 1 (m)
    # 80: # Thickness of standard floor window layer 2 (m)
    # 81: # Thickness of standard floor window layer 3 (m)
    # 82: # Thickness of standard floor window layer 4 (m)
    83: 'pu.capacity_surf' # Heat capacity of standard floor wall layers 1 (J/m²/K)
    84: 'pu.capacity_surf' # Heat capacity of standard floor wall layer 2 (J/m²/K)
    85: 'pu.capacity_surf' # Heat capacity of standard floor wall layer 3 (J/m²/K)
    86: 'pu.conductivity_surf' # Thermal conductivity of standard floor wall layers 1 (W/m/K)
    87: 'pu.conductivity_surf' # Thermal conductivity of standard floor wall layer 2 (W/m/K)
    88: 'pu.conductivity_volume' # Thermal conductivity of standard floor wall layer 3 (W/m/K)
    89: '1.0' # Wall fraction of roof (1)
    90: !join [r.tloustka*0.01*, *zwall_norm1] # Thickness of roof layer 1 (m)
    91: !join [r.tloustka*0.01*, *zwall_norm2] # Thickness of roof layer 2 (m)
    92: !join [r.tloustka*0.01*, *zwall_norm3] # Thickness of roof layer 3 (m)
    93: !join [r.tloustka*0.01*, *zwall_norm4] # Thickness of roof layer 4 (m)
    94: 'p.capacity_surf' # Heat capacity of roof layers 1 (J/m²/K)
    95: 'p.capacity_surf' # Heat capacity of roof layer 2 (J/m²/K)
    96: 'p.capacity_volume' # Heat capacity of roof layer 3 (J/m²/K)
    97: 'p.conductivity_surf' # Thermal conductivity of roof layers 1 (W/m/K)
    98: 'p.conductivity_surf' # Thermal conductivity of roof layer 2 (W/m/K)
    99: 'p.conductivity_volume' # Thermal conductivity of roof layer 3 (W/m/K)
    100: 'r.emisivita' # Emissivity of roof (1)
    101: '0' # Albedo of roof (1) albedo_type = 0 albedo will be supplied by albedo_props
    102: '0' # Window fraction of roof (1)
    # 103: # Thickness of roof window layer 1 (m)
    # 104: # Thickness of roof window layer 2 (m)
    105: '0.0' # Thickness of roof window layer 3 (m)
    # 106: # Thickness of roof window layer 4 (m)
    # 107: # Heat capacity of window layers 1 (J/m²/K)
    # 108: # Heat capacity of window layer 2 (J/m²/K)
    # 109: # Heat capacity of window layer 3 (J/m²/K)
    # 110: # Thermal conductivity of window layers 1 (W/m/K)
    # 111: # Thermal conductivity of window layer 2 (W/m/K)
    # 112: # Thermal conductivity of window layer 3 (W/m/K)
    # 113: # Emissivity of roof window (1)
    # 114: # Transmissivity of roof window (1)
    # 115: # Albedo of roof window (1)
    # 116: # Emissivity of roof green surface (1)
    # 117: # Albedo of roof green surface (1)
    # 118: # Type of green roof (=1 extensive, =2 intensive)) (1)
    # 119: # Shading factor (1)
    # 120: # Window g-value (1)
    # 121: # Window u-value (W/m²/K)
    # 122: # Basic air flow without occupancy of room (1/h)
    # 123: # Additional air flow during occupancy of room (1/h)
    # 124: # Heat recovery efficiency (1)
    # 125: # Factor for mass specific active surface (1)
    # 126: # Factor for inner heat storage of building zone (J/m²/K)
    # 127: # Ratio of internal surface to floor area (1)
    # 128: # Maximum heating capacity (W)
    # 129: # Maximum cooling capacity (W)
    # 130: # Additional internal heat gains during occupancy of room
    # 131: # Basic internal heat gains without occupancy of room
    # 132: # Storey height (m)
    # 133: # Ceiling construction height  (m)
    # 134: # Technology heating factor for anthropogenic heat losses (1)
    # 135: # Technology cooling factor for anthropogenic heat losses (1)
    136: 'pu.capacity_volume' # Heat capacity of wall layer 4 above the ground floor level (J/m²/K)
    137: 'pu.conductivity_volume' # Thermal conductivity of wall layer 4 above the ground floor level (W/m/K)
    138: 'pg.capacity_volume' # Heat capacity of wall layer 4 at the ground floor level (J/m²/K)
    139: 'pg.conductivity_volume' # Thermal conductivity of wall layer 4 at the ground floor level (W/m/K)
    # 140: # Heat capacity of wall layer 4 at ground plate (J/m²/K)
    # 141: # Thermal conductivity of wall layer 4 at ground plate (W/m/K)
    # 142: # Heat capacity of window layer 4 at the ground floor level (J/m²/K)
    # 143: # Thermal conductivity of window layer 4 at the ground floor level (W/m/K)
    # 144: # Heat capacity of window layer 4 above the ground floor level (J/m²/K)
    # 145: # Thermal conductivity of window layer 4 above the ground floor level (W/m/K)
    146: 'p.capacity_surf' # Heat capacity of wall layer 4 at roof (J/m²/K)
    147: 'p.conductivity_surf' # Thermal conductivity of wall layer 4 at roof (W/m/K)
    # 148: # Heat capacity of window layer 4 at roof (J/m²/K)
    # 149: # Thermal conductivity of window layer 4 at roof  (W/m/K)
    
building_surface_pars:
    0: ['1', 'w.wallfracd', 'w.wallfrach', '1', '1']  # wall fraction (0-1) (set according building_pars_repl)
    1: ['0', 'w.winfracd', 'w.winfrach', '0', '0']  # window fraction (0-1) # no data for window fraction on roofs, set to zero TODO: not used so far
    2: '0'  # green fraction on wall (0-1) not in use set to zero so far TODO
    3: '0'  # green fraction on roof (0-1) set 0.9 for roof type 4 (lawn) and 0.5 for roof type 5 (ornamental garden) (set according building_pars_repl)
    4: '0'  # leaf area index of green fraction (roof) set 1.4 for roof type 4 (lawn) and 0.4 for roof type 5 (ornamental garden) (set according building_pars_repl)
    5: ['pr.capacity_surf',        'pg.capacity_surf',       'pu.capacity_surf',       'pd.capacity_surf',       'b.capacity_surf'] # heat capacity of wall layer 1
    6: ['pr.capacity_surf',        'pg.capacity_surf',       'pu.capacity_surf',       'pd.capacity_surf',       'b.capacity_surf']  # heat capacity of wall layer 2
    7: ['pr.capacity_volume',      'pg.capacity_volume',     'pu.capacity_volume',     'pd.capacity_volume',     'b.capacity_volume']  # heat capacity of wall layer 3
    8: ['pr.conductivity_surf',    'pg.conductivity_surf',   'pu.conductivity_surf',   'pd.conductivity_surf',   'b.conductivity_surf']  # thermal conductivity of wall layer 1
    9: ['pr.conductivity_surf',    'pg.conductivity_surf',   'pu.conductivity_surf',   'pd.conductivity_surf',   'b.conductivity_surf']  # thermal conductivity of wall layer 2
    10: ['pr.conductivity_volume', 'pg.conductivity_volume', 'pu.conductivity_volume', 'pd.conductivity_volume', 'b.conductivity_volume']  # thermal conductivity of wall layer 3
    11: *indoor_temp  # indoor target summer temperature (K)
    12: *outdoor_temp  # indoor target winter temperature (K)
    13: ['r.emisivita', 'pg.emissivity', 'pu.emissivity', 'pd.emissivity', 'b.emissivity']  #['r.emisivita', 'w.emisivitad', 'w.emisivitah', 'pd.emissivity']  # emissivity of wall fraction (0-1)
    14: ['r.emisivita', 'pg.emissivity', 'pu.emissivity', 'pd.emissivity', 'b.emissivity']  #['r.emisivita', 'w.emisivitad', 'w.emisivitah', 'pd.emissivity']  # emissivity of green fraction (0-1) TODO separate emissivity for green fraction
    15: ['r.emisivita', 'pg.emissivity', 'pu.emissivity', 'pd.emissivity', 'b.emissivity']  #['r.emisivita', 'w.emisivitad', 'w.emisivitah', 'pd.emissivity']  # emissivity of window fraction (0-1) TODO separate emissivity for window fraction
    16: *wintrans  # transmissivity of window fraction (0-1) TODO temporary transmissivity of window set to fixed parameter wintrans
    17: ['pr.roughness',   'pg.roughness',    'pu.roughness',     'pd.roughness',    'b.roughness']  # roughness length for momentum (m) ['0.021', '0.022', '0.023'] #
    18: ['pr.roughness_h', 'pg.roughness_h',  'pu.roughness_h',   'pd.roughness_h',  'b.roughness_h']  # roughness length for heat (m)
    19: ['r.albedo',       'w.albedod',        'w.albedoh',       'pd.emissivity',   'b.emissivity']  # Broadband albedo of wall fraction
    20: ['1-r.emisivita',  '1-pg.emissivity',  '1-pu.emissivity', '1-pd.emissivity', '1-b.emissivity']  #['1-r.emisivita', '1-w.emisivitad', '1-w.emisivitah', '1-pd.emissivity']  # Longwave albedo of wall fraction
    21: ['r.albedo',       'w.albedod',        'w.albedoh',       'pd.albedo',       'b.albedo']  # Shortwave albedo of wall fraction
    22: ['r.albedo',       'w.albedod',        'w.albedoh',       'pd.albedo',       'b.albedo']  # Broadband albedo of window fraction
    23: ['1-r.emisivita',  '1-pg.emissivity',  '1-pu.emissivity', '1-pd.emissivity', '1-b.emissivity']  #['1-r.emisivita', '1-w.emisivitad', '1-w.emisivitah', '1-pd.emissivity']  # Longwave albedo of window fraction
    24: ['r.albedo',       'w.albedod',        'w.albedoh',       'pd.albedo',       'b.albedo']  # Shortwave albedo of window fraction
    25: ['r.albedo',       'w.albedod',        'w.albedoh',       'pd.albedo',       'b.albedo']  # Broadband albedo of green fraction
    26: ['1-r.emisivita',  '1-pg.emissivity',  '1-pu.emissivity', '1-pd.emissivity', '1-b.emissivity']  #['1-r.emisivita', '1-w.emisivitad', '1-w.emisivitah', '1-pd.emissivity']  # Longwave albedo of green fraction
    27: ['r.albedo',       'w.albedod',        'w.albedoh',       'pd.albedo',       'b.albedo']  # Shortwave albedo of green fraction
    
soil_moisture_adjust:
    35: 1.0  # 2.0
    36: 1.0  # 0.5
    
building_pars_repl:
    99999: [ [ 99999, 0.5 ], [ 99999, 0.5 ] ]

building_surface_pars_repl:
    99999: [ [ 99999, 0.5 ], [ 99999, 0.5 ] ]